-- Paste your previous silent aim code here (the first code block you provided)
local SilentAimSettings = {
    Enabled = false,
    
    ClassName = "PasteWare  |  github.com/FakeAngles",
    ToggleKey = "U",
    
    TeamCheck = false,
    TargetPart = "HumanoidRootPart",
    SilentAimMethod = "Raycast",
    
    FOVRadius = 130,
    FOVVisible = false,
    ShowSilentAimTarget = false, 
    
    HitChance = 100
}

getgenv().SilentAimSettings = SilentAimSettings -- Use getgenv()

local Camera = workspace.CurrentCamera
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local GuiService = game:GetService("GuiService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService") -- Add TweenService

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

local GetChildren = game.GetChildren
local GetPlayers = Players.GetPlayers
local WorldToScreen = Camera.WorldToScreenPoint
local WorldToViewportPoint = Camera.WorldToViewportPoint
local GetPartsObscuringTarget = Camera.GetPartsObscuringTarget
local FindFirstChild = game.FindFirstChild
local RenderStepped = RunService.RenderStepped
local GuiInset = GuiService.GetGuiInset
local GetMouseLocation = UserInputService.GetMouseLocation

local resume = coroutine.resume 
local create = coroutine.create

local ValidTargetParts = {"Head", "HumanoidRootPart", "Torso", "LeftUpperArm", "RightUpperArm"} -- More parts
local PredictionAmount = 0.165
local currentTargetPartIndex = 1 -- Start with Head


local fov_circle = Drawing.new("Circle")
fov_circle.Thickness = 1
fov_circle.NumSides = 100
fov_circle.Radius = 180
fov_circle.Filled = false
fov_circle.Visible = false
fov_circle.ZIndex = 999
fov_circle.Transparency = 1
fov_circle.Color = Color3.fromRGB(54, 57, 241)

local ExpectedArguments = {
    ViewportPointToRay = {
        ArgCountRequired = 2,
        Args = { "number", "number" }
    },
    ScreenPointToRay = {
        ArgCountRequired = 2,
        Args = { "number", "number" }
    },
    Raycast = {
        ArgCountRequired = 3,
        Args = { "Instance", "Vector3", "Vector3", "RaycastParams" }
    },
    FindPartOnRay = {
        ArgCountRequired = 2,
        Args = { "Ray", "Instance", "boolean", "boolean" }
    },
    FindPartOnRayWithIgnoreList = {
        ArgCountRequired = 3,
        Args = { "Ray", "table", "boolean", "boolean" }
    },
    FindPartOnRayWithWhitelist = { 
        ArgCountRequired = 3,
        Args = { "Ray", "table", "boolean", "boolean" }
    }
}

function CalculateChance(Percentage)

    Percentage = math.floor(Percentage)


    local chance = math.floor(Random.new().NextNumber(0, 1) * 100) / 100


    return chance <= Percentage / 100
end


local function getPositionOnScreen(Vector)
    local Vec3, OnScreen = WorldToScreen(Camera, Vector)
    return Vector2.new(Vec3.X, Vec3.Y), OnScreen
end

local function ValidateArguments(Args, RayMethod)
    local Matches = 0
    if #Args < RayMethod.ArgCountRequired then
        return false
    end
    for Pos, Argument in next, Args do
        if typeof(Argument) == RayMethod.Args[Pos] then
            Matches = Matches + 1
        end
    end
    return Matches >= RayMethod.ArgCountRequired
end

local function getDirection(Origin, Position)
    return (Position - Origin).Unit * 1000
end

local function getMousePosition()
    return GetMouseLocation(UserInputService)
end

--Corrected IsPlayerVisible
local function IsPlayerVisible(Player)
    local PlayerCharacter = Player.Character
    local LocalPlayerCharacter = LocalPlayer.Character

    if not (PlayerCharacter and LocalPlayerCharacter) then return false end -- BOTH must exist

    local PlayerRoot = PlayerCharacter:FindFirstChild(SilentAimSettings.TargetPart) or PlayerCharacter:FindFirstChild("HumanoidRootPart")

    if not PlayerRoot then return false end

    local CastPoints = {PlayerRoot.Position}  --Only need target position for obscuring
    local IgnoreList = {LocalPlayerCharacter, PlayerCharacter}
    local ObscuringObjects = #GetPartsObscuringTarget(Camera, CastPoints, IgnoreList)
    
    return ObscuringObjects == 0
end

--Corrected getClosestPlayer
local function getClosestPlayer()
    if not SilentAimSettings.TargetPart then return end
		local ClosestDistance = math.huge
    local ClosestTarget = nil
    local center = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)


    for _, Player in ipairs(GetPlayers(Players)) do  -- Use ipairs for array iteration
        if Player == LocalPlayer then continue end
        if SilentAimSettings.TeamCheck and Player.Team == LocalPlayer.Team then continue end
        local Character = Player.Character
        if not Character then continue end
        local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")
        local Humanoid = Character:FindFirstChild("Humanoid")
        if not HumanoidRootPart or not Humanoid or Humanoid.Health <= 0 then continue end

        local targetPart = Character:FindFirstChild(SilentAimSettings.TargetPart) or HumanoidRootPart
        local ScreenPosition, OnScreen = getPositionOnScreen(targetPart.Position)
        if not OnScreen then continue end

        local Distance = (center - ScreenPosition).Magnitude
        if Distance <= SilentAimSettings.FOVRadius and Distance < ClosestDistance then
            ClosestTarget = targetPart
            ClosestDistance = Distance
        end
    end
    return ClosestTarget
end


local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()

local isLockedOn = false
local targetPlayer = nil
local lockEnabled = false  -- Not used in the original, but good practice to have
local smoothingFactor = 0.1
local predictionFactor = 0.0
local bodyPartSelected = "Head" -- Use this for initial value, but we'll override
local aimLockEnabled = false -- Not used in original


local function getBodyPart(character, part)
    return character:FindFirstChild(part) and part or "Head"
end


--Kept your nearest playertomouse function, good practice for lock.
local function getNearestPlayerToMouse()
    if not aimLockEnabled then return nil end 
    local nearestPlayer = nil
    local shortestDistance = math.huge
    local mousePosition = Camera:ViewportPointToRay(Mouse.X, Mouse.Y).Origin

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild(bodyPartSelected) then
            local part = player.Character[bodyPartSelected]
            local screenPosition, onScreen = Camera:WorldToViewportPoint(part.Position)
            if onScreen then
                local distance = (Vector2.new(screenPosition.X, screenPosition.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
                if distance < shortestDistance then
                    nearestPlayer = player
                    shortestDistance = distance
                end
            end
        end
    end
    return nearestPlayer
end

local function toggleLockOnPlayer()
    if not lockEnabled or not aimLockEnabled then return end

    if isLockedOn then
        isLockedOn = false
        targetPlayer = nil
    else
        targetPlayer = getNearestPlayerToMouse()
        if targetPlayer and targetPlayer.Character then
            local part = getBodyPart(targetPlayer.Character, bodyPartSelected)
            if targetPlayer.Character:FindFirstChild(part) then
                isLockedOn = true
            end
        end
    end
end

-- GUI Setup and Logic
-- (Place the "Converted" table from your second post here)
-- Instances:

local Converted = {
	["_UI Templates"] = Instance.new("ScreenGui");
	["_Toggle On silent aim"] = Instance.new("Frame");
	["_UICorner"] = Instance.new("UICorner");
	["_UIGradient"] = Instance.new("UIGradient");
	["_Toggle On"] = Instance.new("ImageButton");
	["_UICorner1"] = Instance.new("UICorner");
	["_UIGradient1"] = Instance.new("UIGradient");
	["_Toggle On Text"] = Instance.new("TextLabel");
	["_ignore"] = Instance.new("Frame");
	["_Label Text"] = Instance.new("TextLabel");
	["_More"] = Instance.new("Frame");
	["_UICorner2"] = Instance.new("UICorner");
	["_UIGradient2"] = Instance.new("UIGradient");
	["_TargetPart Change"] = Instance.new("ImageButton");
	["_UICorner3"] = Instance.new("UICorner");
	["_UIGradient3"] = Instance.new("UIGradient");
	["_Label"] = Instance.new("TextLabel");
	["_LabelsEx1"] = Instance.new("TextLabel");
	["_Ignore"] = Instance.new("Frame");
	["_UnitMultipleChange"] = Instance.new("ImageButton");
	["_UICorner4"] = Instance.new("UICorner");
	["_UIGradient4"] = Instance.new("UIGradient");
	["_Label1"] = Instance.new("TextLabel");
	["_LabelsEx"] = Instance.new("TextLabel");
	["_Ignore1"] = Instance.new("Frame");
}

-- Properties:

Converted["_UI Templates"].ZIndexBehavior = Enum.ZIndexBehavior.Sibling
Converted["_UI Templates"].Name = "UI Templates"
Converted["_UI Templates"].Parent = game:GetService("CoreGui")
Converted["_UI Templates"].ResetOnSpawn = false -- Prevent UI reset

Converted["_Toggle On silent aim"].AnchorPoint = Vector2.new(0.5, 0.5)
Converted["_Toggle On silent aim"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Toggle On silent aim"].BorderColor3 = Color3.fromRGB(27.000002190470695, 42.000001296401024, 53.000004440546036)
Converted["_Toggle On silent aim"].Position = UDim2.new(0.0797117501, 0, 0.121118851, 0)
Converted["_Toggle On silent aim"].Size = UDim2.new(0.125517115, 0, 0.169904798, 0)
Converted["_Toggle On silent aim"].Name = "Toggle On silent aim"
Converted["_Toggle On silent aim"].Parent = Converted["_UI Templates"]
Converted["_Toggle On silent aim"].Active = true --Draggable
Converted["_Toggle On silent aim"].Draggable = true --Draggable

Converted["_UICorner"].CornerRadius = UDim.new(0.150000006, 0)
Converted["_UICorner"].Parent = Converted["_Toggle On silent aim"]

Converted["_UIGradient"].Color = ColorSequence.new{
	ColorSequenceKeypoint.new(0, Color3.fromRGB(22.000000588595867, 23.000000528991222, 27.000000290572643)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(52.000000700354576, 57.00000040233135, 62.00000010430813))
}
Converted["_UIGradient"].Rotation = -90
Converted["_UIGradient"].Parent = Converted["_Toggle On silent aim"]

Converted["_Toggle On"].AnchorPoint = Vector2.new(0.5, 0.5)
Converted["_Toggle On"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Toggle On"].BorderColor3 = Color3.fromRGB(27.000002190470695, 42.000001296401024, 53.000004440546036)
Converted["_Toggle On"].Position = UDim2.new(0.497840792, 0, 0.68496716, 0)
Converted["_Toggle On"].Size = UDim2.new(0.859477401, 0, 0.298871398, 0)
Converted["_Toggle On"].Name = "Toggle On"
Converted["_Toggle On"].Parent = Converted["_Toggle On silent aim"]

Converted["_UICorner1"].CornerRadius = UDim.new(1, 0)
Converted["_UICorner1"].Parent = Converted["_Toggle On"]

Converted["_UIGradient1"].Color = ColorSequence.new{
	ColorSequenceKeypoint.new(0, Color3.fromRGB(3.000000058673322, 100.00000163912773, 170.0000050663948)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(2.000000118277967, 163.00000548362732, 245.00000059604645))
}
Converted["_UIGradient1"].Parent = Converted["_Toggle On"]

Converted["_Toggle On Text"].Font = Enum.Font.Unknown
Converted["_Toggle On Text"].RichText = true
Converted["_Toggle On Text"].Text = "Toggle On"
Converted["_Toggle On Text"].TextColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Toggle On Text"].TextScaled = true
Converted["_Toggle On Text"].TextSize = 14
Converted["_Toggle On Text"].TextWrapped = true
Converted["_Toggle On Text"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Toggle On Text"].BackgroundTransparency = 1
Converted["_Toggle On Text"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_Toggle On Text"].BorderSizePixel = 0
Converted["_Toggle On Text"].Position = UDim2.new(0.0272197984, 0, 0.0747528449, 0)
Converted["_Toggle On Text"].Size = UDim2.new(0.946512341, 0, 0.824334681, 0)
Converted["_Toggle On Text"].Name = "Toggle On Text"
Converted["_Toggle On Text"].Parent = Converted["_Toggle On"]

Converted["_ignore"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_ignore"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_ignore"].BorderSizePixel = 0
Converted["_ignore"].Position = UDim2.new(0.087730512, 0, 0.407702088, 0)
Converted["_ignore"].Size = UDim2.new(0.853215635, 0, 0.0075487243, 0)
Converted["_ignore"].Name = "ignore"
Converted["_ignore"].Parent = Converted["_Toggle On silent aim"]

Converted["_Label Text"].Font = Enum.Font.Unknown
Converted["_Label Text"].RichText = true
Converted["_Label Text"].Text = "Silent Aim"
Converted["_Label Text"].TextColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Label Text"].TextScaled = true
Converted["_Label Text"].TextSize = 14
Converted["_Label Text"].TextWrapped = true
Converted["_Label Text"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Label Text"].BackgroundTransparency = 1
Converted["_Label Text"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_Label Text"].BorderSizePixel = 0
Converted["_Label Text"].Position = UDim2.new(-0.00584870065, 0, 0.0880217552, 0)
Converted["_Label Text"].Size = UDim2.new(1, 0, 0.260858923, 0)
Converted["_Label Text"].Name = "Label Text"
Converted["_Label Text"].Parent = Converted["_Toggle On silent aim"]

Converted["_More"].AnchorPoint = Vector2.new(0.5, 0.5)
Converted["_More"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_More"].BorderColor3 = Color3.fromRGB(27.000002190470695, 42.000001296401024, 53.000004440546036)
Converted["_More"].Position = UDim2.new(0.302620173, 0, 0.121118851, 0)
Converted["_More"].Size = UDim2.new(0.28037858, 0, 0.203120992, 0)
Converted["_More"].Name = "More"
Converted["_More"].Parent = Converted["_UI Templates"]
Converted["_More"].Active = true --Draggable
Converted["_More"].Draggable = true --Draggable

Converted["_UICorner2"].CornerRadius = UDim.new(0.150000006, 0)
Converted["_UICorner2"].Parent = Converted["_More"]

Converted["_UIGradient2"].Color = ColorSequence.new{
	ColorSequenceKeypoint.new(0, Color3.fromRGB(22.000000588595867, 23.000000528991222, 27.000000290572643)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(52.000000700354576, 57.00000040233135, 62.00000010430813))
}
Converted["_UIGradient2"].Rotation = -90
Converted["_UIGradient2"].Parent = Converted["_More"]

Converted["_TargetPart Change"].AnchorPoint = Vector2.new(0.5, 0.5)
Converted["_TargetPart Change"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_TargetPart Change"].BorderColor3 = Color3.fromRGB(27.000002190470695, 42.000001296401024, 53.000004440546036)
Converted["_TargetPart Change"].Position = UDim2.new(0.239302486, 0, 0.646542668, 0)
Converted["_TargetPart Change"].Size = UDim2.new(0.34240073, 0, 0.23130922, 0)
Converted["_TargetPart Change"].Name = "TargetPart Change"
Converted["_TargetPart Change"].Parent = Converted["_More"]

Converted["_UICorner3"].CornerRadius = UDim.new(1, 0)
Converted["_UICorner3"].Parent = Converted["_TargetPart Change"]

Converted["_UIGradient3"].Color = ColorSequence.new{
	ColorSequenceKeypoint.new(0, Color3.fromRGB(3.000000058673322, 100.00000163912773, 170.0000050663948)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(2.000000118277967, 163.00000548362732, 245.00000059604645))
}
Converted["_UIGradient3"].Parent = Converted["_TargetPart Change"]

Converted["_Label"].Font = Enum.Font.Unknown
Converted["_Label"].RichText = true
Converted["_Label"].Text = "Head"
Converted["_Label"].TextColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Label"].TextScaled = true
Converted["_Label"].TextSize = 14
Converted["_Label"].TextWrapped = true
Converted["_Label"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Label"].BackgroundTransparency = 1
Converted["_Label"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_Label"].BorderSizePixel = 0
Converted["_Label"].Position = UDim2.new(0.0272197984, 0, 0.0747528449, 0)
Converted["_Label"].Size = UDim2.new(0.946512341, 0, 0.824334681, 0)
Converted["_Label"].Name = "Label"
Converted["_Label"].Parent = Converted["_TargetPart Change"]

Converted["_LabelsEx1"].Font = Enum.Font.Unknown
Converted["_LabelsEx1"].RichText = true
Converted["_LabelsEx1"].Text = "Target Part"
Converted["_LabelsEx1"].TextColor3 = Color3.fromRGB(255, 255, 255)
Converted["_LabelsEx1"].TextScaled = true
Converted["_LabelsEx1"].TextSize = 14
Converted["_LabelsEx1"].TextWrapped = true
Converted["_LabelsEx1"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_LabelsEx1"].BackgroundTransparency = 1
Converted["_LabelsEx1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_LabelsEx1"].BorderSizePixel = 0
Converted["_LabelsEx1"].Position = UDim2.new(0.0369744077, 0, 0.128904045, 0)
Converted["_LabelsEx1"].Size = UDim2.new(0.393261343, 0, 0.260858893, 0)
Converted["_LabelsEx1"].Name = "LabelsEx1"
Converted["_LabelsEx1"].Parent = Converted["_More"]

Converted["_Ignore"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Ignore"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_Ignore"].BorderSizePixel = 0
Converted["_Ignore"].Position = UDim2.new(0.0679976121, 0, 0.415063322, 0)
Converted["_Ignore"].Size = UDim2.new(0.342505217, 0, 0.00754872477, 0)
Converted["_Ignore"].Name = "Ignore"
Converted["_Ignore"].Parent = Converted["_More"]

Converted["_UnitMultipleChange"].AnchorPoint = Vector2.new(0.5, 0.5)
Converted["_UnitMultipleChange"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_UnitMultipleChange"].BorderColor3 = Color3.fromRGB(27.000002190470695, 42.000001296401024, 53.000004440546036)
Converted["_UnitMultipleChange"].Position = UDim2.new(0.667580307, 0, 0.640913427, 0)
Converted["_UnitMultipleChange"].Size = UDim2.new(0.34240073, 0, 0.23130922, 0)
Converted["_UnitMultipleChange"].Name = "UnitMultipleChange"
Converted["_UnitMultipleChange"].Parent = Converted["_More"]

Converted["_UICorner4"].CornerRadius = UDim.new(1, 0)
Converted["_UICorner4"].Parent = Converted["_UnitMultipleChange"]

Converted["_UIGradient4"].Color = ColorSequence.new{
	ColorSequenceKeypoint.new(0, Color3.fromRGB(3.000000058673322, 100.00000163912773, 170.0000050663948)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(2.000000118277967, 163.00000548362732, 245.00000059604645))
}
Converted["_UIGradient4"].Parent = Converted["_UnitMultipleChange"]

Converted["_Label1"].Font = Enum.Font.Unknown
Converted["_Label1"].RichText = true
Converted["_Label1"].Text = "UnitMultiple - " .. string.format("%.3f",PredictionAmount)
Converted["_Label1"].TextColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Label1"].TextScaled = true
Converted["_Label1"].TextSize = 14
Converted["_Label1"].TextWrapped = true
Converted["_Label1"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Label1"].BackgroundTransparency = 1
Converted["_Label1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_Label1"].BorderSizePixel = 0
Converted["_Label1"].Position = UDim2.new(0.0378874615, 0, 0.0747528151, 0)
Converted["_Label1"].Size = UDim2.new(0.929440916, 0, 0.824334681, 0)
Converted["_Label1"].Name = "Label"
Converted["_Label1"].Parent = Converted["_UnitMultipleChange"]

Converted["_LabelsEx"].Font = Enum.Font.Unknown
Converted["_LabelsEx"].RichText = true
Converted["_LabelsEx"].Text = "Prediction"
Converted["_LabelsEx"].TextColor3 = Color3.fromRGB(255, 255, 255)
Converted["_LabelsEx"].TextScaled = true
Converted["_LabelsEx"].TextSize = 14
Converted["_LabelsEx"].TextWrapped = true
Converted["_LabelsEx"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_LabelsEx"].BackgroundTransparency = 1
Converted["_LabelsEx"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_LabelsEx"].BorderSizePixel = 0
Converted["_LabelsEx"].Position = UDim2.new(0.473290563, 0, 0.112449601, 0)
Converted["_LabelsEx"].Size = UDim2.new(0.393261343, 0, 0.260858893, 0)
Converted["_LabelsEx"].Name = "LabelsEx"
Converted["_LabelsEx"].Parent = Converted["_More"]

Converted["_Ignore1"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Ignore1"].BorderColor3 = Color3.fromRGB(0, 0, 0)
Converted["_Ignore1"].BorderSizePixel = 0
Converted["_Ignore1"].Position = UDim2.new(0.497661203, 0, 0.422424525, 0)
Converted["_Ignore1"].Size = UDim2.new(0.342505217, 0, 0.00754872477, 0)
Converted["_Ignore1"].Name = "Ignore"
Converted["_Ignore1"].Parent = Converted["_More"]

-- Slide-in Animation
local slideInTime = 0.5  -- Duration of the slide-in animation

local function slideInFrame(frame)
    frame.Position = frame.Position - UDim2.new(0, 0, 0.5, 0)  -- Start off-screen
    frame.Transparency = 1

    local tweenInfo = TweenInfo.new(slideInTime, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local positionTween = TweenService:Create(frame, tweenInfo, {Position = frame.Position + UDim2.new(0,0,0.5,0)})
    local transparencyTween = TweenService:Create(frame, tweenInfo, {Transparency = 0})

    positionTween:Play()
    transparencyTween:Play()
end


-- Button Functionality

-- Toggle Silent Aim
Converted["_Toggle On"].MouseButton1Click:Connect(function()
    SilentAimSettings.Enabled = not SilentAimSettings.Enabled
    Converted["_Toggle On Text"].Text = SilentAimSettings.Enabled and "Toggle Off" or "Toggle On"
     -- Change gradient colors based on enabled state.
    if SilentAimSettings.Enabled then
        Converted["_UIGradient1"].Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)), -- Red when enabled
            ColorSequenceKeypoint.new(1, Color3.fromRGB(170, 0, 0))
        }
    else
      Converted["_UIGradient1"].Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Color3.fromRGB(3, 100, 170)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(2, 163, 245))
        }
    end
end)

-- Cycle Target Part
Converted["_TargetPart Change"].MouseButton1Click:Connect(function()
    currentTargetPartIndex = currentTargetPartIndex + 1
    if currentTargetPartIndex > #ValidTargetParts then
        currentTargetPartIndex = 1
    end
    SilentAimSettings.TargetPart = ValidTargetParts[currentTargetPartIndex]
    Converted["_Label"].Text = SilentAimSettings.TargetPart
end)

--Change prediction
local function UpdatePredictionText()
	Converted["_Label1"].Text = "UnitMultiple - " .. string.format("%.3f",PredictionAmount)
end

Converted["_UnitMultipleChange"].MouseButton1Click:Connect(function()
	PredictionAmount = PredictionAmount + 0.005
	--Change prediction
local function UpdatePredictionText()
	Converted["_Label1"].Text = "UnitMultiple - " .. string.format("%.3f",PredictionAmount)
end

Converted["_UnitMultipleChange"].MouseButton1Click:Connect(function()
	PredictionAmount = PredictionAmount + 0.005
	UpdatePredictionText()
    if PredictionAmount > 0.300 then
		PredictionAmount = 0.300
	end
	UpdatePredictionText()
end)

Converted["_UnitMultipleChange"].MouseButton2Click:Connect(function()
	PredictionAmount = PredictionAmount - 0.005
    if PredictionAmount < 0 then
		PredictionAmount = 0
	end
	UpdatePredictionText()
end)

-- Initial UI setup
slideInFrame(Converted["_Toggle On silent aim"])
slideInFrame(Converted["_More"])
UpdatePredictionText() --Ensure Prediction Text Is Correct.

-- Main Silent Aim Logic (RenderStepped)
RunService.RenderStepped:Connect(function()
    if SilentAimSettings.Enabled then
        local target = getClosestPlayer()
        if target then
            local cameraCFrame = Camera.CFrame
            local targetPosition = target.Position + (target.Velocity * PredictionAmount) -- Apply prediction
            local newCFrame = CFrame.new(cameraCFrame.Position, targetPosition)
            Camera.CFrame = newCFrame
        end
    end
end)

--Old aimlock, kept, incase you implement.
RunService.RenderStepped:Connect(function()
    if aimLockEnabled and lockEnabled and isLockedOn and targetPlayer and targetPlayer.Character then
        local partName = getBodyPart(targetPlayer.Character, bodyPartSelected)
        local part = targetPlayer.Character:FindFirstChild(partName)

        if part and targetPlayer.Character:FindFirstChildOfClass("Humanoid").Health > 0 then
            local predictedPosition = part.Position + (part.AssemblyLinearVelocity * predictionFactor)
            local currentCameraPosition = Camera.CFrame.Position

            Camera.CFrame = CFrame.new(currentCameraPosition, predictedPosition) * CFrame.new(0, 0, smoothingFactor)
        else
            isLockedOn = false
            targetPlayer = nil
        end
    end
end)
